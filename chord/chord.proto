syntax = "proto3";

package chord;

option go_package = "./protocol";

service Chord {
    // A simple ping function
    rpc Ping (PingRequest) returns (PingResponse) {}

    // Function to get a value for a given key
    rpc Get (GetRequest) returns (GetResponse) {}

    // Function to put a key-value pair
    rpc Put (PutRequest) returns (PutResponse) {}

    // Function to delete a key-value pair
    rpc Delete (DeleteRequest) returns (DeleteResponse) {}

    rpc Notify(NotifyRequest) returns (NotifyResponse);

    rpc GetPredecessorAndSuccessors(GetPredecessorAndSuccessorsRequest) returns (GetPredecessorAndSuccessorsResponse);

    rpc FindSuccessor(FindSuccessorRequest) returns (FindSuccessorResponse);

    rpc PutAll(PutAllRequest) returns (PutAllResponse) {}

    rpc GetAll(GetAllRequest) returns (GetAllResponse) {}
}

message PingRequest {
    // No request parameters needed for ping
}

message PingResponse {
    // No response parameters needed for ping
}

message GetRequest {
    // Key to retrieve value
    string key = 1;
}

message GetResponse {
    // Value corresponding to the key
    string value = 1;
}

message PutRequest {
    // Key and value to be stored
    string key = 1;
    string value = 2;
}

message PutResponse {
    // No response needed for put
}

message DeleteRequest {
    // Key to be deleted
    string key = 1;
}

message DeleteResponse {
    // No response needed for delete
}

message NotifyRequest {
    string callerAddress = 1;
}

message NotifyResponse {

}

message GetPredecessorAndSuccessorsRequest {
    
}

message GetPredecessorAndSuccessorsResponse {
    string predecessor = 1;        // Address of the predecessor
    repeated string successors = 2; // List of successors
}

message FindSuccessorRequest {
    bytes id = 1;  // The ID for which the successor is needed
}

message FindSuccessorResponse {
    bool found = 1;        // True if the exact successor was found
    string successor = 2;  // The address of the successor or closest preceding node
}

message PutAllRequest {
    map<string, string> pairs = 1;
}

message PutAllResponse {
    bool success = 1;
}

message GetAllRequest {
    string new_node_address = 1;
}

message GetAllResponse {
    map<string, string> pairs = 1;
}